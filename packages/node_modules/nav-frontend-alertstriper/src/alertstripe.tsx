import * as PT from 'prop-types';
import * as React from 'react';
import * as classNames from 'classnames';
import { Normaltekst } from 'nav-frontend-typografi';
import Ikon, { icons } from 'nav-frontend-ikoner-assets';

import 'nav-frontend-alertstriper-style';

export enum AlertStripeType {
    'info' = 'info',
    'suksess' = 'suksess',
    'advarsel' = 'advarsel',
    'stopp' = 'stopp'
}

const cls = (type, solid, className) => classNames('alertstripe', className, {
    'alertstripe--solid': solid,
    'alertstripe--info': type === 'info',
    'alertstripe--suksess': type === 'suksess',
    'alertstripe--advarsel': type === 'advarsel',
    'alertstripe--stopp': type === 'stopp'
});

const ikonKind = (type: AlertStripeType): icons => {
    const kindMap = {
        'info-sirkel-fyll': type === 'info',
        'ok-sirkel-fyll': type === 'suksess',
        'advarsel-sirkel-fyll': type === 'advarsel',
        'feil-sirkel-fyll': type === 'stopp'
    };

    return Object.keys(kindMap)
        .map((key) => ({ key, predicate: kindMap[key] }))
        .find(({ predicate }) => predicate)!.key as icons;
};

export interface AlertStripeProps {
    /**
     * -
     */
    children: React.ReactNode | React.ReactChild | React.ReactChildren;
    /**
     * Bestemmer om Alertstripen skal ha bakgrunnsfarge eller ikke
     */
    solid ? : boolean;
    /**
     * -
     */
    size ? : string | number;
    /**
     * -
     */
    className ? : string;
}

export interface AlertStripeBaseProps extends  AlertStripeProps {
    /**
     * Varianter Ã¥ velge mellom
     */
    type: AlertStripeType;
}

class AlertStripe extends React.Component<AlertStripeBaseProps> {
    render() {
        const { type, solid, size, className, children, ...props } = this.props;
        const ariaLive = (type === 'advarsel') ? 'assertive' : undefined;

        return (
            <div className={cls(type, solid, className)} {...props} aria-live={ariaLive}>
                <span className="alertstripe__ikon" aria-label={type}>
                    <Ikon kind={ikonKind(type)} size={size} />
                </span>
                <Normaltekst className="alertstripe__tekst" tag="span">{children}</Normaltekst>
            </div>
        );
    }
}

(AlertStripe as React.ComponentClass).propTypes = {
    children: PT.node.isRequired,
    type: PT.oneOf([
        AlertStripeType.info,
        AlertStripeType.suksess,
        AlertStripeType.advarsel,
        AlertStripeType.stopp
    ]).isRequired,
    solid: PT.bool,
    size: PT.oneOfType([PT.string, PT.number]),
    className: PT.string
};

(AlertStripe as React.ComponentClass).defaultProps = {
    className: undefined,
    size: '1.5em',
    solid: false
};

export default AlertStripe;

export { default as AlertStripeInfo } from './info-alertstripe';
export { default as AlertStripeInfoSolid } from './info-solid-alertstripe';

export { default as AlertStripeSuksess } from './suksess-alertstripe';
export { default as AlertStripeSuksessSolid } from './suksess-solid-alertstripe';

export { default as AlertStripeAdvarsel } from './advarsel-alertstripe';
export { default as AlertStripeAdvarselSolid } from './advarsel-solid-alertstripe';

export { default as AlertStripeStopp } from './stopp-alertstripe';
export { default as AlertStripeStoppSolid } from './stopp-solid-alertstripe';
