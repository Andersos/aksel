import React from 'react';
import PT from 'prop-types';
import cn from 'classnames';

import 'nav-frontend-veileder-style';

const cls = (props) => cn('nav-frontend-veileder', {
    'nav-frontend-veileder--warning': props.type === 'advarsel',
    'nav-frontend-veileder--error': props.type === 'feilmelding',
    'nav-frontend-veileder--success': props.type === 'suksess'
});

const frameCls = (props) => cn('nav-frontend-veileder__frame', {
    'nav-frontend-veileder__frame--center': props.center,
    'nav-frontend-veileder__frame--transparent': props.transparent,
    'nav-frontend-veileder__frame--nomask': props.nomask
});

class Veileder extends React.Component {

    renderChatBubble(says, width, chatBubbleStyles, chatBubbleArrowStyles, chatBubbleProps) {
        if (says) {
            const scaleMultiplier = Math.max(0.5, width/150);

            let bubbleStyles = { 
                bottom: width + (20 * scaleMultiplier)/2, 
                marginRight: width/2
            };

            Object.assign(bubbleStyles, chatBubbleStyles);

            let arrowStyles = {
                bottom: Math.ceil(-20 - ( 20 * scaleMultiplier / 2 - 20 / 2)),
                right: ( ( 20 - 20 * scaleMultiplier ) * -1 ) + (20 * scaleMultiplier),
                transform: 'scale(' + scaleMultiplier + ')'
            };

            Object.assign(arrowStyles, chatBubbleArrowStyles);

            return (
                <div className="nav-frontend-veileder__chatBubble" style={bubbleStyles} {...chatBubbleProps}>
                    {says}
                    <i className="nav-frontend-veileder__chatBubbleArrow" style={arrowStyles}></i>
                </div>
            );
        }
    }

    render() {
        const { 
            children, 
            says, 
            color, 
            transparent, 
            center,
            nomask,
            width, 
            chatBubbleProps,
            chatBubbleStyles, 
            chatBubbleArrowStyles, 
            ...other 
        } = this.props;
        
        let frameStyles = {};
        
        if (!transparent && color) {
            frameStyles['background'] = color;
        }

        if (width) {
            frameStyles['width'] = width;
            frameStyles['height'] = width;
        }

        return (
            <div className={cls(this.props)} {...other}>
                <div className={frameCls(this.props)} style={frameStyles}>{children}</div>
                {this.renderChatBubble(says, width, chatBubbleStyles, chatBubbleArrowStyles, chatBubbleProps)}
            </div>
        );
    }
}

Veileder.propTypes = {
    /**
     * Definerer størrelsen på Avataren. Kan angis helt fritt, og snakkeboblen vil posisjoneres 
     * basert på denne verdien. Snakkeboble-pilen vil også skalere avhengig av 'width'.
     */
    width: PT.number,
    /**
     * Custom SVG-element som illustrerer en figur, f.eks. en av disse: 
     * https://app.zeplin.io/project/59831e455850985791bdeb4d/screen/5a7c1fcc36781f9423ab6a0e
     */
    children: PT.node,
    /**
     * Tekst eller HTML som rendres i en snakkeboble
     */
    says: PT.node,
    /**
     * Hex-fargecode som definerer bakgrunnsfarge, @navLysGra er default
     */
    color: PT.string,
    /**
     * Skrur av bakgrunnsfargen
     */
    transparent: PT.bool,
    /**
     * Skrur av sirkulær maskering/cropping av children
     */
    nomask: PT.bool,
    /**
     * Skrur av 80% height på children, og rendrer i full høyde (hvis innholdet skal sentreres)
     */
    center: PT.bool,
    /**
     * Øvrige custom props for snakkeboble-elementet
     */
    chatBubbleProps: PT.object,
    /**
     * Overstyr CSS styling for snakkeboblen
     */
    chatBubbleStyles: PT.object,
    /**
     * Overstyr CSS styling for snakkeboble-pilen
     */
    chatBubbleArrowStyles: PT.object,
    /**
     * Predefinerte nøkler for styling av snakkeboblen, avhengig av type budskap.
     */
    type: PT.oneOf(['normal','suksess', 'advarsel', 'feilmelding'])
};

Veileder.defaultProps = {
    width: 230,
    children: undefined,
    says: undefined,
    color: undefined,
    transparent: false,
    nomask: false,
    center: false,
    chatBubbleProps: undefined,
    chatBubbleStyles: undefined,
    chatBubbleArrowStyles: undefined,
    type: 'normal'
};

export default Veileder;
