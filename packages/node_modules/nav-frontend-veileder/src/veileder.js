import React from 'react';
import PT from 'prop-types';
import cn from 'classnames';

import 'nav-frontend-veileder-style'; // eslint-disable-line import/extensions

const cls = (props) => cn('nav-frontend-veileder', {
    'nav-frontend-veileder--warning': props.type === 'advarsel',
    'nav-frontend-veileder--error': props.type === 'feilmelding',
    'nav-frontend-veileder--success': props.type === 'suksess'
});

const frameCls = (props) => cn('nav-frontend-veileder__frame', {
    'nav-frontend-veileder__frame--center': props.center,
    'nav-frontend-veileder__frame--transparent': props.transparent,
    'nav-frontend-veileder__frame--nomask': props.nomask
});

const renderChatBubble = (says, width, chatBubbleStyles, chatBubbleArrowStyles, chatBubbleProps) => {
    if (says) {
        const scaleMultiplier = Math.max(0.5, width / 150);

        const bubbleStyles = {
            bottom: width + ((20 * scaleMultiplier) / 2),
            marginRight: width / 2
        };

        Object.assign(bubbleStyles, chatBubbleStyles);

        const arrowStyles = {
            bottom: Math.ceil(-20 - (((20 * scaleMultiplier) / 2) - (20 / 2))),
            right: ((20 - (20 * scaleMultiplier)) * -1) + (20 * scaleMultiplier),
            transform: 'scale(' + scaleMultiplier + ')' // eslint-disable-line prefer-template
        };

        Object.assign(arrowStyles, chatBubbleArrowStyles);

        return (
            <div className="nav-frontend-veileder__chatBubble" style={bubbleStyles} {...chatBubbleProps}>
                {says}
                <i className="nav-frontend-veileder__chatBubbleArrow" style={arrowStyles} />
            </div>
        );
    }

    return undefined;
};

class Veileder extends React.Component { // eslint-disable-line react/prefer-stateless-function
    render() {
        const {
            children,
            says,
            color,
            transparent,
            center, // eslint-disable-line no-unused-vars
            nomask, // eslint-disable-line no-unused-vars
            width,
            chatBubbleProps,
            chatBubbleStyles,
            chatBubbleArrowStyles,
            ...other
        } = this.props;

        const frameStyles = {};

        if (!transparent && color) {
            frameStyles.background = color;
        }

        if (width) {
            frameStyles.width = width;
            frameStyles.height = width;
        }

        return (
            <div className={cls(this.props)} {...other}>
                <div className={frameCls(this.props)} style={frameStyles}>{children}</div>
                {renderChatBubble(says, width, chatBubbleStyles, chatBubbleArrowStyles, chatBubbleProps)}
            </div>
        );
    }
}

Veileder.propTypes = {
    /**
     * Definerer størrelsen på Avataren. Kan angis helt fritt, og snakkeboblen vil posisjoneres
     * basert på denne verdien. Snakkeboble-pilen vil også skalere avhengig av 'width'.
     */
    width: PT.number,
    /**
     * Custom SVG-element som illustrerer en figur, f.eks. en av disse:
     * https://app.zeplin.io/project/59831e455850985791bdeb4d/screen/5a7c1fcc36781f9423ab6a0e
     */
    children: PT.node,
    /**
     * Tekst eller HTML som rendres i en snakkeboble
     */
    says: PT.node,
    /**
     * Hex-fargecode som definerer bakgrunnsfarge, @navLysGra er default
     */
    color: PT.string,
    /**
     * Skrur av bakgrunnsfargen
     */
    transparent: PT.bool,
    /**
     * Skrur av sirkulær maskering/cropping av children
     */
    nomask: PT.bool,
    /**
     * Skrur av 80% height på children, og rendrer i full høyde (hvis innholdet skal sentreres)
     */
    center: PT.bool,
    /**
     * Øvrige custom props for snakkeboble-elementet
     */
    chatBubbleProps: PT.object, // eslint-disable-line react/forbid-prop-types
    /**
     * Overstyr CSS styling for snakkeboblen
     */
    chatBubbleStyles: PT.object, // eslint-disable-line react/forbid-prop-types
    /**
     * Overstyr CSS styling for snakkeboble-pilen
     */
    chatBubbleArrowStyles: PT.object, // eslint-disable-line react/forbid-prop-types
    /**
     * Predefinerte nøkler for styling av snakkeboblen, avhengig av type budskap.
     */
    type: PT.oneOf(['normal', 'suksess', 'advarsel', 'feilmelding'])
};

Veileder.defaultProps = {
    width: 230,
    children: undefined,
    says: undefined,
    color: undefined,
    transparent: false,
    nomask: false,
    center: false,
    chatBubbleProps: undefined,
    chatBubbleStyles: undefined,
    chatBubbleArrowStyles: undefined,
    type: 'normal'
};

export default Veileder;
