import * as React from 'react';
import * as cn from 'classnames';

import { omit } from 'nav-frontend-js-utils';

import 'nav-frontend-stegindikator-style';

const cls = (state) => cn('stegindikator', {
    'stegindikator--kompakt': state.kompakt
});

const stegCls = (props) => cn('stegindikator__steg', {
    'stegindikator__steg--labelled': props.visLabel
});

const innerCls = (props) => cn('stegindikator__steg-inner', {
    'stegindikator__steg-inner--aktiv': props.aktiv,
    'stegindikator__steg-inner--ferdig': props.ferdig,
    'stegindikator__steg-inner--disabled': props.disabled,
    'stegindikator__steg-inner--interaktiv': typeof props.onClick === 'function' && !props.aktiv
});

export interface StegindikatorStegProps {
    label: string;
    index: number;
    visLabel?: boolean;
    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    aktiv?: boolean;
    ferdig?: boolean;
    disabled?: boolean;
}

export interface NavFrontendStegindikatorProps {
    steg: StegindikatorStegProps[];
    visLabel: boolean;
    kompakt: boolean;
    aktivtSteg: number;
    ferdigSteg: number[];
    autoResponsiv: boolean;
}

export interface NavFrontendStegindikatorState {
    visLabel: boolean;
    kompakt: boolean;
}

class StegindikatorSteg extends React.Component<StegindikatorStegProps> {

    getInnerStep() {
        const labelTemplate = (<div className="stegindikator__steg-label">{this.props.label}</div>);
        const label = (this.props.visLabel) ? labelTemplate : undefined;
        const num = this.props.index + 1;

        if (typeof this.props.onClick === 'function' && !this.props.aktiv) {
            return (
                <button
                    className={innerCls(this.props)}
                    title={this.props.label}
                    onClick={this.props.onClick}
                    disabled={this.props.disabled}
                >
                    <div className="stegindikator__steg-num">{num}</div>
                    {label}
                </button>
            );
        }

        return (
            <div className={innerCls(this.props)} title={this.props.label}>
                <div className="stegindikator__steg-num">{num}</div>
                {label}
            </div>
        );
    }

    render() {
        const domProps = omit(
            this.props,
            'label',
            'aktiv',
            'ferdig',
            'visLabel',
            'index',
            'disabled',
            'onClick'
        );

        return (
            <li className={stegCls(this.props)} {...domProps}>
                {this.getInnerStep()}
            </li>
        );
    }
}

class NavFrontendStegindikator extends React.Component<NavFrontendStegindikatorProps, NavFrontendStegindikatorState> {
    static defaultProps: Partial<NavFrontendStegindikatorProps> = {
        visLabel: false,
        kompakt: false,
        aktivtSteg: 1,
        ferdigSteg: [],
        autoResponsiv: false
    };

    private list: HTMLOListElement;

    constructor(props: NavFrontendStegindikatorProps) {
        super(props);
        this.state = {
            visLabel: props.visLabel,
            kompakt: props.kompakt
        };

        if (props.autoResponsiv) {
            window.addEventListener('resize', this.adjustSize);
        }
    }

    componentDidMount() {
        if (this.props.autoResponsiv) {
            this.adjustSize();
        }
    }

    componentWillReceiveProps(nextProps: NavFrontendStegindikatorProps) {
        if (!this.props.autoResponsiv && nextProps.autoResponsiv) {
            window.addEventListener('resize', this.adjustSize);
        }

        if (nextProps.autoResponsiv) {
            this.setState({
                visLabel: (this.canShowLabel()) ? nextProps.visLabel : false,
                kompakt: nextProps.kompakt
            });
        } else {
            this.setState({
                visLabel: nextProps.visLabel,
                kompakt: nextProps.kompakt
            });
        }
    }

    componentWillUnmount() {
        window.removeEventListener('resize', this.adjustSize);
    }

    getDimensions() {
        const remSize = parseFloat(String(getComputedStyle(document.documentElement).fontSize));
        const margin = remSize * 1.25;
        const marginTotal = (margin * this.props.steg.length) - margin;
        const visLabelWidth = ((remSize * 10) * this.props.steg.length) + marginTotal;
        const normalWidth = ((remSize * 2) * this.props.steg.length) + marginTotal;

        return {
            visLabelWidth,
            normalWidth,
            container: this.list!.getBoundingClientRect().width
        };
    }

    canShowLabel = () => {
        const dim = this.getDimensions();
        return dim.container >= dim.visLabelWidth && this.props.visLabel;
    }

    canBeNormal = () => {
        const dim = this.getDimensions();
        return dim.container >= dim.normalWidth && !this.props.kompakt;
    }

    adjustSize = () => {
        this.setState({
            visLabel: this.canShowLabel(),
            kompakt: !this.canBeNormal()
        });
    }

    render() {
        const domProps = omit(
            this.props,
            'steg',
            'children',
            'visLabel',
            'kompakt',
            'onClick',
            'aktivtSteg',
            'ferdigSteg',
            'autoResponsiv'
        );

        return (
            <div className={cls(this.state)} {...domProps}>
                <ol 
                    className="stegindikator__liste"
                    ref={(list: HTMLOListElement) => { this.list = list; }}
                >
                    {
                        this.props.steg.map((steg, i) => {
                            const iFerdigSteg = this.props.ferdigSteg.indexOf(i) !== -1;
                            const preAktivtSteg = i < this.props.aktivtSteg;
                            const ferdig = (this.props.ferdigSteg.length) ? iFerdigSteg : preAktivtSteg;

                            return (
                                <StegindikatorSteg
                                    index={i}
                                    label={steg.label}
                                    visLabel={this.state.visLabel}
                                    key={`${steg.label.split(' ').join('')}`}
                                    aktiv={this.props.aktivtSteg === i}
                                    ferdig={ferdig}
                                    {...steg}
                                />
                            );
                        })
                    }
                </ol>
            </div>
        );
    }
}

export default NavFrontendStegindikator;
