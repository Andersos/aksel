import React from 'react';
import PT from 'prop-types';
import cn from 'classnames';

import { omit } from 'nav-frontend-js-utils';

import 'nav-frontend-stegindikator-style'; // eslint-disable-line import/extensions

const cls = (state) => cn('stegindikator', {
    'stegindikator--kompakt': state.kompakt
});

const stegCls = (props) => cn('stegindikator__steg', {
    'stegindikator__steg--labelled': props.visLabel
});

const innerCls = (props) => cn('stegindikator__steg-inner', {
    'stegindikator__steg-inner--aktiv': props.aktiv,
    'stegindikator__steg-inner--ferdig': props.ferdig,
    'stegindikator__steg-inner--disabled': props.disabled
});

class StegindikatorSteg extends React.Component {

    getInnerStep() {
        const labelTemplate = (<div className="stegindikator__steg-label">{this.props.label}</div>);
        const label = (this.props.visLabel) ? labelTemplate : undefined;

        if (typeof this.props.onClick === 'function' && !this.props.aktiv) {
            return (
                <button
                    className={innerCls(this.props)}
                    title={this.props.label}
                    onClick={this.props.onClick}
                    disabled={this.props.disabled}
                >
                    <div className="stegindikator__steg-num">{this.props.index}</div>
                    {label}
                </button>
            );
        }

        return (
            <div className={innerCls(this.props)} title={this.props.label}>
                <div className="stegindikator__steg-num">{this.props.index}</div>
                {label}
            </div>
        );
    }

    render() {
        const domProps = omit(
            this.props,
            'label',
            'aktiv',
            'ferdig',
            'visLabel',
            'index',
            'disabled',
            'onClick'
        );

        return (
            <li className={stegCls(this.props)} {...domProps}>
                {this.getInnerStep()}
            </li>
        );
    }
}

class NavFrontendStegindikator extends React.Component { // eslint-disable-line react/no-multi-comp

    constructor(props) {
        super(props);

        this.stegNodes = [];
        this.state = {
            visLabel: props.visLabel,
            kompakt: props.kompakt
        };

        if (props.autoResponsiv) {
            window.addEventListener('resize', this.checkSize);
        }
    }

    componentDidMount() {
        if (this.props.autoResponsiv) {
            this.checkSize();
        }
    }

    componentWillReceiveProps(nextProps) {
        if (!this.props.autoResponsiv && nextProps.autoResponsiv) {
            window.addEventListener('resize', this.checkSize);
        }

        if (nextProps.autoResponsiv) {
            this.setState({
                visLabel: (this.canShowLabel()) ? nextProps.visLabel : false,
                kompakt: nextProps.kompakt
            });
        } else {
            this.setState({
                visLabel: nextProps.visLabel,
                kompakt: nextProps.kompakt
            });
        }
    }

    componentWillUnmount() {
        window.removeEventListener('resize', this.checkSize);
    }

    getDimensions() {
        const remSize = parseFloat(getComputedStyle(document.documentElement).fontSize);
        const margin = remSize * 1.25;
        const marginTotal = (margin * this.props.steg.length) - margin;
        const visLabelWidth = ((remSize * 10) * this.props.steg.length) + marginTotal;
        const normalWidth = ((remSize * 2) * this.props.steg.length) + marginTotal;

        return {
            visLabelWidth,
            normalWidth,
            container: this.list.getBoundingClientRect().width
        };
    }

    canShowLabel = () => {
        const dim = this.getDimensions();
        return dim.container >= dim.visLabelWidth && this.props.visLabel;
    }

    canBeNormal = () => {
        const dim = this.getDimensions();
        return dim.container >= dim.normalWidth && !this.props.kompakt;
    }

    checkSize = () => {
        this.setState({
            visLabel: this.canShowLabel(),
            kompakt: !this.canBeNormal()
        });
    }

    render() {
        const domProps = omit(
            this.props,
            'steg',
            'children',
            'visLabel',
            'kompakt',
            'onClick',
            'aktivtSteg',
            'ferdigSteg',
            'autoResponsiv',
            'disabled'
        );

        return (
            <div className={cls(this.state)} {...domProps}>
                <ol ref={(list) => { this.list = list; }}>
                    {
                        this.props.steg.map((steg, i) => (
                            <StegindikatorSteg
                                index={(i + 1)}
                                label={steg.label}
                                visLabel={this.state.visLabel}
                                key={`${steg.label.split(' ').join('')}`}
                                aktiv={this.props.aktivtSteg === (i + 1)}
                                ferdig={this.props.ferdigSteg && this.props.ferdigSteg.indexOf(i + 1) !== -1}
                                {...steg}
                            />
                        ))
                    }
                </ol>
            </div>
        );
    }
}

StegindikatorSteg.propTypes = {
    index: PT.number.isRequired,
    label: PT.string.isRequired,
    visLabel: PT.bool,
    onClick: PT.func,
    aktiv: PT.bool,
    disabled: PT.bool
};

StegindikatorSteg.defaultProps = {
    visLabel: false,
    onClick: undefined,
    aktiv: false,
    disabled: false
};

NavFrontendStegindikator.propTypes = {
    steg: PT.arrayOf(PT.shape({
        label: PT.string.isRequired,
        onClick: PT.func,
        disabled: PT.bool
    })).isRequired,
    visLabel: PT.bool,
    kompakt: PT.bool,
    aktivtSteg: PT.number,
    ferdigSteg: PT.arrayOf(PT.number),
    autoResponsiv: PT.bool,
    disabled: PT.bool
};

NavFrontendStegindikator.defaultProps = {
    visLabel: false,
    kompakt: false,
    aktivtSteg: 1,
    ferdigSteg: [],
    autoResponsiv: false,
    disabled: false
};

export default NavFrontendStegindikator;
