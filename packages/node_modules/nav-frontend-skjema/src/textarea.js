import React, { Component, PropTypes as PT } from 'react';
import { omit, guid } from 'nav-frontend-js-utils';
import 'nav-frontend-skjema-style'; // eslint-disable-line import/extensions
import classNames from 'classnames';

/**
 * Selvekspanderende tekstområde med teller
 */
class Textarea extends Component {

    constructor(props) {
        super(props);
        this.state = { antall: 0, hoyde: 50 };
    }

    handleChange = (e) => {
        e.target.style.height = `${36}px`; // eslint-disable-line no-param-reassign
        e.target.style.height = `${this.tekstomrade.scrollHeight + 30}px`; // eslint-disable-line no-param-reassign

        this.setState({
            antall: this.tekstomrade.value.length
        });

        if (this.props.onChange !== undefined) {
            this.props.onChange(e);
        }
    };

    render() {
        const { label, maxLength, textareaClass, id, name, children, ...other } = this.props;

        const domProps = omit(
            { ...other },
            'onChange'
        );
        const textareaId = id || name || guid();
        const cls = (className) => classNames(className, 'skjemaelement__input textarea--medMeta');

        return (
            <div className="skjemaelement">
                <label className="skjemaelement__label" htmlFor={id}>
                    {label}
                </label>
                <textarea
                    ref={(textarea) => { this.tekstomrade = textarea; }}
                    onChange={this.handleChange}
                    className={cls(textareaClass)}
                    type="text"
                    id={textareaId}
                    style={{ height: `${66}px` }}
                    maxLength={maxLength}
                    {...domProps}
                >{children}</textarea>
                <p className="textarea--medMeta__teller">
                    <span>Du har {maxLength - this.state.antall} tegn igjen</span>
                </p>
            </div>
        );
    }
}

Textarea.propTypes = {
    /**
     * Ledetekst for tekstområdet
     */
    label: PT.node.isRequired,
    /**
     * Maks antal tegn som kan skrives inn i tekstområdet
     */
    maxLength: PT.number,
    /**
     * Klassenavn for tekstomnrådet
     */
    textareaClass: PT.string,
    /**
     * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
     */
    id: PT.string,
    /**
     * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
     */
    name: PT.string,
    /**
     * Setter innholdet i textarea
     */
    children: PT.node,
    /**
     * Optional onChange handler
     */
    onChange: PT.func
};

Textarea.defaultProps = {
    maxLength: 2000,
    textareaClass: '',
    id: undefined,
    name: undefined,
    children: null,
    onChange: undefined
};


export default Textarea;
