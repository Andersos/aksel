import * as React from 'react';
import Input, { NavFrontendInputProps } from './input';
import 'nav-frontend-skjema-style';

export interface FnrInputProps extends NavFrontendInputProps {
    onValidate: (isValid: boolean) => void;
}

function isBirthNumFormat(value) {
    const birthNumber = value.toString();

    function sumFn(bNum, factors) {
        let sum = 0;
        for (let i = 0, l = factors.length; i < l; ++i) { // tslint:disable-line no-increment-decrement
            sum += parseInt(bNum.charAt(i), 10) * factors[i];
        }
        return sum;
    }

    let checksum1 = 11 - (sumFn(birthNumber, [3, 7, 6, 1, 8, 9, 4, 5, 2]) % 11);
    if (checksum1 === 11) checksum1 = 0;
    let checksum2 = 11 - (sumFn(birthNumber, [5, 4, 3, 2, 7, 6, 5, 4, 3, 2]) % 11);
    if (checksum2 === 11) checksum2 = 0;
    return checksum1 === parseInt(birthNumber.charAt(9), 10)
            && checksum2 === parseInt(birthNumber.charAt(10), 10);
}

class FnrInput extends React.Component<FnrInputProps> {
    onChange(e) {
        if (this.props.onValidate) {
            const valid = e.currentTarget.validity.valid && isBirthNumFormat(e.currentTarget.value);
            this.props.onValidate(valid);
        }
    }
    render () {
        return (
            <Input
                {...this.props}
                type="number"
                inputClassName="skjemaelement__input_fodselsnr"
                onChange={(e) => this.onChange(e)}
            />
        );
    }
}

export default FnrInput;
