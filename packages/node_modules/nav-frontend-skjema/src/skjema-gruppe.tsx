import * as PT from 'prop-types';
import * as React from 'react';
import * as classNames from 'classnames';
import { guid } from 'nav-frontend-js-utils';
import SkjemaelementFeilmelding from './skjemaelement-feilmelding';
import { Input } from './';
import 'nav-frontend-skjema-style';

const cls = (className, harFeil, utenContext) => classNames('skjemagruppe', className, {
    'skjemagruppe--feil': harFeil && !utenContext
});

export type SkjemaGruppeFeilContextProps = {
    feil?: React.ReactNode | boolean;
    feilmeldingId?: string;
};

export const SkjemaGruppeFeilContext = React.createContext<Partial<SkjemaGruppeFeilContextProps>>({});

export interface SkjemaGruppeProps {
    /**
     * En eller flere children, oftest en eller flere .skjemaelement
     */
    children: React.ReactNode | React.ReactNode[];
    /**
     * ClassName
     */
    className?: string;
    /**
     * Bestemmer hvilken HTML-tag som skal brukes. Default er 'fieldset'.
     */
    tag?: string;
    /**
     * Legend/tittel for skjemagruppen
     */
    legend?: React.ReactNode;
    /**
     * Ekstrainformasjon under legend/tittel
     */
    description?: React.ReactNode;
    /**
     * Hvis skjemagruppen har feil sender man inn et objekt med en feilmelding
     */
    feil?: React.ReactNode | boolean;
    /**
     * Valgfri ID til intern SkjemaelementFeilmelding
     */
    feilmeldingId?: string;
    /**
     * Option om man skal sende feilcontext til barnekomponenter
     */
    utenFeilContext?: boolean;
}

/**
 * Fieldset
 */
class SkjemaGruppe extends React.Component<SkjemaGruppeProps> {
    render() {
        const {
            children,
            className,
            feil,
            legend,
            description,
            tag = 'fieldset',
            feilmeldingId,
            utenFeilContext,
            ...other
        } = this.props;
        const descriptionId = (description) ? guid() : undefined;

        const propegateErrorToChildren = utenFeilContext ?
            children :
            <SkjemaGruppeFeilContext.Provider value={{ feil, feilmeldingId }}>
                {children}
            </SkjemaGruppeFeilContext.Provider>;

        const content = (
            <React.Fragment>
                {legend && <legend className="skjemagruppe__legend">{legend}</legend>}
                {
                    description &&
                    <div
                        className="skjemagruppe__description"
                        id={descriptionId}
                    >
                        {description}
                    </div>
                }
                {propegateErrorToChildren}
                <SkjemaelementFeilmelding id={feilmeldingId}>
                    {typeof feil !== 'boolean' && feil}
                </SkjemaelementFeilmelding>
            </React.Fragment>
        );

        return React.createElement(
            tag,
            {
                className: cls(className, feil, utenFeilContext),
                'aria-invalid': !!feil,
                'aria-errormessage': feilmeldingId,
                'aria-describedby': descriptionId,
                ...other
            },
            content
        );
    }
}

(SkjemaGruppe as React.ComponentClass).propTypes = {
    /**
     * En eller flere children, oftest en eller flere .skjemaelement
     */
    children: PT.oneOfType([
        PT.arrayOf(PT.node),
        PT.node
    ]).isRequired,
    /**
     * ClassName
     */
    className: PT.string,
    /**
     * Bestemmer hvilken HTML-tag som skal brukes
     */
    tag: PT.string,
    /**
     * legend for skjemagruppen
     */
    legend: PT.node,
    /**
     * Ekstrainformasjon under legend/tittel
     */
    description: PT.node,
    /**
     * Feilmelding
     */
    feil: PT.oneOfType([PT.node, PT.bool]),
    /**
     * Feilmeldings id
     */
    feilmeldingId: PT.string,
    /**
     * Option om man sernder feilcontext videre til barnekomponenter
     */
    utenFeilContext: PT.bool
};

(SkjemaGruppe as React.ComponentClass).defaultProps = {
    className: undefined,
    feil: undefined,
    tag: 'fieldset',
    utenFeilContext: undefined
};

export default SkjemaGruppe;
