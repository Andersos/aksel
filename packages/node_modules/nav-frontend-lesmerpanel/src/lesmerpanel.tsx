import * as React from 'react';
import { PropTypes as PT } from 'prop-types';
import 'nav-frontend-lesmerpanel-style';
import LesMerToggle from './lesmerpanelToggle';
import { scrollTo, erSynligIViewport } from './lesmerutils';

export interface LesMerPanelBaseProps {
    /**
     * Hvorvidt panelet initielt er åpent
     */
    erApen?: boolean;
    /**
     * Funksjon som kalles når panelet åpnes
     */
    onOpen?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;
    /**
     * Funksjon som kalles når panelet lukkes
     */
    onClose?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;
    /**
     * Innhold som plasseres før "Åpne"
     */
    intro: React.ReactNode;
    /**
     * Innhold som vises når man klikker på "Åpne"
     */
    mer: React.ReactNode;
    /**
     * ID til panelet
     */
    id: string;
    /**
     * Tekst som vises for å lukke panelet
     */
    lukkTekst: string;
    /**
     * Tekst som vises for å åpne panelet
     */
    apneTekst: string;
    /**
     * Egendefinert klassenavn
     */
    className: string;
}

export interface LesMerPanelBaseState {
    erApen: boolean;
    containerClassName: string;
    hindreToggle: boolean;
    hoyde: any;
    visInnhold: boolean;
    harTransisjon: boolean;
}

/**
 * Lesmerpanel
 */
class Lesmerpanel extends React.Component<LesMerPanelBaseProps, LesMerPanelBaseState> {
    lesMerPanel: HTMLDivElement | null;

    mer: HTMLDivElement | null;

    static defaultProps: Partial<LesMerPanelBaseProps> = {
        erApen: false,
        apneTekst: 'Åpne',
        lukkTekst: 'Lukk',
        onClose: () => {},
        onOpen: () => {}
    };

    constructor(props) {
        super(props);
        this.state = {
            erApen: props.erApen,
            containerClassName: '',
            hindreToggle: false,
            hoyde: !props.erApen ? '0' : 'auto',
            visInnhold: props.erApen,
            harTransisjon: false
        };
    }

    onTransitionEnd() {
        if (this.state.harTransisjon) {
            this.setState({
                harTransisjon: false
            });
            if (this.state.erApen) {
                scrollTo(this.lesMerPanel, 600);
                this.setState({
                    hindreToggle: false
                });
                this.setAutoHoyde();
                if (this.mer) {
                    this.mer.focus();
                }
            } else {
                this.setState({
                    hindreToggle: false,
                    visInnhold: false
                });
                if (!erSynligIViewport(this.lesMerPanel)) {
                    scrollTo(this.lesMerPanel, 600);
                }
            }
        }
    }

    setAutoHoyde() {
        /* Fjerner animasjonsklassen slik at Safari ikke
        tegner komponenten på nytt når høyde settes til 'auto': */
        this.setState({
            containerClassName: ''
        });
        // Setter høyde til auto:
        setTimeout(
            () => {
                this.setState({
                    hoyde: 'auto',
                    containerClassName: ''
                });
            },
            0);
    }

    apne() {
        this.setState({
            hoyde: '0',
            hindreToggle: true,
            containerClassName: ' lesMerPanel__merContainer--medAnimasjon',
            visInnhold: true,
            harTransisjon: true
        });
        setTimeout(
            () => {
                const hoyde = this.mer ? this.mer.offsetHeight : '0';
                this.setState({
                    hoyde,
                    erApen: true
                });
            },
            10);
    }

    lukk() {
        const hoyde = this.mer ? this.mer.offsetHeight : '0';
        this.setState({
            hoyde,
            hindreToggle: true,
            harTransisjon: true
        });
        setTimeout(
            () => {
                this.setState({
                    containerClassName: ' lesMerPanel__merContainer--medAnimasjon',
                    hoyde: '0',
                    erApen: false
                });
            },
            10);
    }

    toggle(e, onOpen, onClose) {
        e.preventDefault();
        if (!this.state.hindreToggle) {
            /* hindreToggle for å hindre dobbelklikk,
            eller at noen klikker mens animasjonen pågår.
            Dobbelklikk vil skape kluss med logikken. */
            if (this.state.erApen) {
                this.lukk();
                onClose();
            } else {
                this.apne();
                onOpen();
            }
        }
    }

    render() {
        const { className, intro, id, mer, onOpen, onClose } = this.props;
        return (
            <div
                id={id}
                ref={(c) => {
                    this.lesMerPanel = c;
                }}
                className={`lesMerPanel ${className}`}
            >
                <div>
                    {intro}
                </div>
                <div
                    style={{ height: this.state.hoyde }}
                    className={`lesMerPanel__merContainer${this.state.containerClassName}`}
                    onTransitionEnd={() => {
                        this.onTransitionEnd();
                    }}
                >
                    <div
                        className="lesMerPanel__mer"
                        tabIndex={-1}
                        ref={(c) => {
                            this.mer = c;
                        }}
                    >
                        {
                            this.state.visInnhold
                                ? mer
                                : null
                        }
                    </div>
                </div>
                <LesMerToggle
                    apneTekst={this.props.apneTekst}
                    lukkTekst={this.props.lukkTekst}
                    erApen={this.state.erApen}
                    onClick={(event) => {
                        this.toggle(event, onOpen, onClose);
                    }}
                />
            </div>);
    }
}

(Lesmerpanel as any).propTypes = {
    /**
     * Hvorvidt panelet initielt er åpent
     */
    erApen: PT.bool,
    /**
     * Funksjon som kalles når panelet åpnes
     */
    onOpen: PT.func,
    /**
     * Funksjon som kalles når panelet lukkes
     */
    onClose: PT.func,
    /**
     * Innhold som plasseres før "Åpne"
     */
    intro: PT.node,
    /**
     * Innhold som vises når man klikker på "Åpne"
     */
    mer: PT.node,
    /**
     * ID til panelet
     */
    id: PT.string,
    /**
     * Tekst som vises for å lukke panelet
     */
    lukkTekst: PT.string,
    /**
     * Tekst som vises for å åpne panelet
     */
    apneTekst: PT.string,
    /**
     * Egendefinert klassenavn
     */
    className: PT.string,
};

export default Lesmerpanel;
