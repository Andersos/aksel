import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { guid, omit, keyCodes } from 'nav-frontend-js-utils';

import Tab, {TabProps} from './tab';
import TabsPure, {TabsPureProps} from './tabs-pure';

import 'nav-frontend-tabs-style';

export interface TabsProps extends TabsPureProps {
    onChange: (index: number) => void;
    defaultAktiv?: number;
}

export interface TabsState {
    aktivTab: number;
}

class Tabs extends React.Component<TabsProps, TabsState> {

    private tabRefs: any[] = [];
    static Tab = Tab;

    static defaultProps: Partial<TabsProps> = {
        kompakt: false,
        defaultAktiv: 0
    };

    constructor(props) {
        super(props);
        this.state = {
            aktivTab: props.defaultAktiv
        };
    }

    componentDidMount(){
        console.log(this.tabRefs);
    }

    handleClick = (e, index) => {
        e.preventDefault();
        this.setActiveTab(index);
    }

    handleKeyDown = (e) => {
        const keyCode = e.keyCode || e.which;
        switch (keyCode) {
            case keyCodes.right:
                if (this.state.aktivTab < (this.getNumTabs() - 1)) this.setActiveTab(this.state.aktivTab + 1);
                break;
            case keyCodes.left:
                if (this.state.aktivTab > 0) this.setActiveTab(this.state.aktivTab - 1);
                break;
        }
    }

    setActiveTab(index){
        this.setState({
            aktivTab: index
        }, () => {
            ReactDOM.findDOMNode(this.tabRefs[index]).focus();
        });
        this.props.onChange(index);
    }

    getNumTabs(){
        if (this.props.children) return React.Children.count(this.props.children);
        return this.props.tabs.length;
    }

    renderTabs() {
        if (this.props.children && !this.props.tabs) {
            return React.Children.map(this.props.children, (child, i) => {
                if (React.isValidElement(child)) {
                    const aktiv = i === this.state.aktivTab;

                    return React.cloneElement(child as React.ReactElement<any>, {
                        onClick: (!child.props['disabled']) ? (e) => this.handleClick(e, i) : undefined,
                        onKeyDown: (e) => this.handleKeyDown(e),
                        tabIndex: (aktiv) ? 0 : -1,
                        tabRef: (node) => this.tabRefs[i] = node,
                        aktiv
                    });
                }
                return child;
            });
        }


        return this.props.tabs.map((tab, i) => {
            const aktiv = i === this.state.aktivTab;
            return (
                <Tab
                    key={guid()}
                    onClick={(!tab.disabled) ? (e) => this.handleClick(e, i) : undefined}
                    onKeyDown={(e) => this.handleKeyDown(e)}
                    tabIndex={(aktiv) ? 0 : -1}
                    aktiv={aktiv}
                    tabRef={(node) => this.tabRefs[i] = node}
                    {...tab}
                />
            );
        })
    }

    render() {
        const domProps = omit(this.props, 'tabs', 'onChange', 'defaultAktiv');

        return (
            <TabsPure {...domProps}>
                {this.renderTabs()}
            </TabsPure>
        );
    }
}

export default Tabs;
export { default as TabsPure } from './tabs-pure';