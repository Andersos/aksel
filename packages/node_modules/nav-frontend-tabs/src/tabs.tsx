import * as React from 'react';
import * as cn from 'classnames';
import { guid, omit } from 'nav-frontend-js-utils';

import Tab, {TabProps} from './tab';

import 'nav-frontend-tabs-style';

const tabsCls = (props) => cn('nav-frontend-tabs', props.className, {
    'nav-frontend-tabs--kompakt': props.kompakt
});

export interface TabsProps {
    tabs: TabProps[];
    onChange: (index: number) => void;
    kompakt?: boolean;
}

export interface TabsState {
    aktivTab: number;
}

class Tabs extends React.Component<TabsProps, TabsState> {

    static Tab = Tab;

    static defaultProps: Partial<TabsProps> = {
        kompakt: false
    };

    constructor(props) {
        super(props);
        this.state = {
            aktivTab: this.getDefaultActiveTabIndex()
        };
    }

    handleClick = (e, index) => {
        e.preventDefault();
        this.setState({
            aktivTab: index
        });
        this.props.onChange(index);
    }

    getDefaultActiveTabIndex() {
        let index;
        if (this.props.children) {
            React.Children.forEach(this.props.children, (child, i) => {
                if (React.isValidElement(child)) {
                    if (child.props['aktiv']) {
                        index = i;
                    }
                }
            });
        } else {
            index = this.props.tabs.findIndex((tab) => !!tab.aktiv);
        }
        return (index !== -1) ? index : 0 ;
    }

    renderTabs() {
        if (this.props.children) {
            return React.Children.map(this.props.children, (child, i) => {
                if (React.isValidElement(child)) {
                    return React.cloneElement(child as React.ReactElement<any>, {
                        aktiv: i === this.state.aktivTab,
                        onClick: (!child.props['disabled']) ? (e) => this.handleClick(e, i) : undefined
                    });
                }
                return child;
            });
        }

        return this.props.tabs.map((tab, i) => {
            return (
                <Tab
                    key={guid()}
                    label={tab.label}
                    aktiv={(this.state.aktivTab === i)}
                    disabled={tab.disabled}
                    onClick={(!tab.disabled) ? (e) => this.handleClick(e, i) : undefined}
                />
            );
        })
    }

    render() {
        const domProps = omit(this.props,
            'children',
            'className',
            'tabs',
            'onChange',
            'kompakt'
        );

        return (
            <div className={tabsCls(this.props)} {...domProps}>
                <ul className="nav-frontend-tabs__tab-list" role="tablist">
                    {this.renderTabs()}
                </ul>
            </div>
        );
    }
}

export default Tabs;
