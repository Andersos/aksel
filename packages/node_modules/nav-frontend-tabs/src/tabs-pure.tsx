import * as React from 'react';
import * as cn from 'classnames';
import { guid, omit, keyCodes } from 'nav-frontend-js-utils';

import Tab, {TabProps} from './tab';

const tabsCls = (props) => cn('nav-frontend-tabs', props.className, {
    'nav-frontend-tabs--kompakt': props.kompakt
});

export interface TabsPureProps {
    tabs: TabProps[];
    kompakt?: boolean;
    manuell?: boolean;
    onChange?: (index: number) => void;
}

class TabsPure extends React.PureComponent<TabsPureProps> {

    private aktivIndex: number = 0;
    private focusIndex: number = 0;
    public linkRefs: any[] = [];

    static Tab = Tab;

    static defaultProps: Partial<TabsPureProps> = {
        kompakt: false,
        manuell: false
    };

    handleClick = (e, index, customClickHandler) => {
        e.preventDefault();
        if (typeof this.props.onChange === 'function') this.props.onChange(index);
        if (typeof customClickHandler === 'function') customClickHandler(index);
    }

    handleKeyDown = (e) => {
        let newIndex;
        let modifier = (this.props.manuell) ? this.focusIndex : this.aktivIndex ;
        const keyCode = e.keyCode || e.which;
        switch (keyCode) {
            case keyCodes.right:
                newIndex = (modifier < (this.getNumTabs() - 1)) ? modifier + 1 : 0 ;
                break;
            case keyCodes.left:
                newIndex = (modifier > 0) ? modifier - 1 : this.getNumTabs() - 1 ;
                break;
        }

        if (newIndex === undefined) return;

        if (this.props.manuell) {
            this.linkRefs[newIndex].focus();
        } else {
            if (typeof this.props.onChange === 'function') this.props.onChange(newIndex);
        }
    }

    getNumTabs(){
        if (this.props.children) return React.Children.count(this.props.children);
        return this.props.tabs.length;
    }

    setFocusIndex = (index) => {
        this.focusIndex = index;
    }

    renderTabs() {
        if (this.props.children) {
            return React.Children.map(this.props.children, (child, i) => {
                if (React.isValidElement(child)) {
                    const aktiv = child.props['aktiv'];
                    
                    if (aktiv) this.aktivIndex = i;

                    return React.cloneElement(child as React.ReactElement<any>, {
                        onClick: (e) => this.handleClick(e, i, child.props['onClick']),
                        onKeyDown: (e) => this.handleKeyDown(e),
                        linkRef: (button) => this.linkRefs[i] = button,
                        onFocus: () => this.focusIndex = i
                    });
                }
            });
        }

        return this.props.tabs.map((tab, i) => {
            if (tab.aktiv) this.aktivIndex = i;
            return (
                <Tab
                    key={guid()}
                    onClick={(e) => this.handleClick(e, i, tab.onClick)}
                    onKeyDown={(e) => this.handleKeyDown(e)}
                    linkRef={(button) => this.linkRefs[i] = button}
                    onFocus={() => this.focusIndex = i}
                    {...tab}
                />
            );
        })
    }

    render () {
        const domProps = omit(this.props,
            'children',
            'className',
            'tabs',
            'kompakt',
            'manuell'
        );

        return (
            <div className={tabsCls(this.props)} {...domProps}>
                <ul className="nav-frontend-tabs__tab-list" role="tablist">
                    {this.renderTabs()}
                </ul>
            </div>
        );
    }
}

export default TabsPure;