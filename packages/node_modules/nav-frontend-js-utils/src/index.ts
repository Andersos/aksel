export function autobind(ctx) {
    Object.getOwnPropertyNames(ctx.constructor.prototype)
        .filter((prop) => typeof ctx[prop] === 'function')
        .forEach((method) => {
            // eslint-disable-next-line
            ctx[method] = ctx[method].bind(ctx);
        });
}

function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
        .toString()
        .substring(1);
}

export function guid() {
    return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;
}

export function fn(value): () => any {
    return typeof value === 'function' ? value : () => value;
}

export function addPropToObject(obj: object, [key, value]: [string|number, any]): object {
    obj[key] = value; // eslint-disable-line no-param-reassign
    return obj;
}

export function omit(obj: object, ...props) {
    return Object.entries(obj)
        .filter(([key]) => !props.includes(key))
        .reduce(addPropToObject, {});
}

function nativeRaf() {
    if (typeof window !== 'undefined') {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame;
    }
    return undefined;
}

function polyfillRaf() {
    return (callback, element, delay) => {
        setTimeout(callback, delay || (1000 / 60), new Date().getTime());
    };
}

export const requestAnimationFrame = nativeRaf() || polyfillRaf();

export function clamp(lower: number, upper: number, numberish: string|number) {
    const number = parseFloat(numberish.toString());
    if (number < lower) return lower;
    if (number > upper) return upper;
    return number;
}

export const keyCodes = {
    tab:      9,
    enter:    13,
    space:    32,
    pageup:   33,
    pagedown: 34,
    end:      35,
    home:     36,
    left:     37,
    up:       38,
    right:    39,
    down:     40
};

export { EventThrottler } from './eventThrottler';
