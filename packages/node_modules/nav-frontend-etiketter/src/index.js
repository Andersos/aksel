import React, { PropTypes as PT } from 'react';
import classNames from 'classnames';


export const typeConfigMap = {
    advarsel: { defaultTag: 'div', cls: (...args) => classNames('etikett__advarsel', ...args) },
    sukse: { defaultTag: 'div', cls: (...args) => classNames('etikett__sukse', ...args) },
    fokus: { defaultTag: 'div', cls: (...args) => classNames('etikett__fokus', ...args) },
    info: { defaultTag: 'div', cls: (...args) => classNames('etikett__info', ...args) }
};

function EtikettBase({ type, tag, className, children, ...props }) {
  const config = getConfigForType(type);
  const tagName = tag || config.defaultTag;
  const classnames = { className: config.cls(className) };
  return React.createElement(tagName, { ...props, ...classnames }, children);
}

function getConfigForType(type) {
    const typeConfig = typeConfigMap[type];
    if (!typeConfig) {
        throw new Error(
            `Kunne ikke finne typeconfig for ${type}. StÃ¸ttede typer er: ${JSON.stringify(Object.keys(typeConfigMap))}`
        );
    }
    return typeConfig;
}

EtikettBase.propTypes = {
    children: PT.node.isRequired
};

EtikettBase.defaultProps = {
    className: undefined
};

export default EtikettBase;

export const EtikettAdvarsel = (props) => <EtikettBase type="advarsel" {...props} />;
export const EtikettFokus = (props) => <EtikettBase type="fokus" {...props} />;
export const EtikettSukse = (props) => <EtikettBase type="sukse" {...props} />;
export const EtikettInfo = (props) => <EtikettBase type="info" {...props} />;
