import * as React from 'react';
import * as classnames from 'classnames';
import { UnmountClosed as Collapse, CollapseProps } from 'react-collapse';
import 'nav-frontend-ekspanderbartpanel-style';
import { guid } from 'nav-frontend-js-utils';

export interface EkspanderbartpanelBasePureProps {
    heading: React.ReactNode;
    className?: string;
    onClick: (event: React.SyntheticEvent<HTMLButtonElement>) => void;
    ariaTittel: string;
    apen: boolean;
    children?: React.ReactNode;
    collapseProps?: Partial<CollapseProps>;
    border?: boolean;
    renderContentWhenClosed?: boolean;
}

const cls = (apen: boolean, border: boolean, className?: string) =>
    classnames('ekspanderbartPanel', className, {
        'ekspanderbartPanel--lukket': !apen,
        'ekspanderbartPanel--apen': apen,
        'ekspanderbartPanel--border': border
    });

class EkspanderbartpanelBasePure extends React.Component<EkspanderbartpanelBasePureProps, {}> {
    static defaultProps: Partial<EkspanderbartpanelBasePureProps> = {
        border: false
    };

    private isCloseAnimation: boolean = false;

    componentWillReceiveProps(nextProps) {
        if (this.props.apen && !nextProps.apen) {
            this.isCloseAnimation = true;
        }
    }

    onRestProxy = () => {
        this.isCloseAnimation = false;

        const { collapseProps } = this.props;
        if (collapseProps && collapseProps.onRest) {
            collapseProps.onRest();
        }
    }

    tabHandler(event) {
        const { keyCode } = event;
        const isTab = keyCode === 9;

        if (isTab && this.isCloseAnimation) {
            event.preventDefault();
        }
    }

    render() {
        const {
            className,
            children,
            apen,
            heading,
            ariaTittel,
            onClick,
            collapseProps,
            border,
            renderContentWhenClosed,
            ...renderProps
        }: EkspanderbartpanelBasePureProps = this.props;

        const renderHiddenContent = renderContentWhenClosed && apen === false;
        const hiddenContentId = guid();
        return (
            <div className={cls(apen, border!, className)} {...renderProps}>
                <button
                    className="ekspanderbartPanel__hode"
                    onKeyDown={(event) => this.tabHandler(event)}
                    onClick={onClick}
                    aria-expanded={apen}
                    aria-controls={renderHiddenContent ? hiddenContentId : undefined}
                    role={renderHiddenContent ? 'tab' : undefined}
                    type="button"
                >
                    <div className="ekspanderbartPanel__flex-wrapper">
                        {heading}
                        <span className="ekspanderbartPanel__indikator" />
                    </div>
                </button>
                <Collapse
                    isOpened={apen}
                    onRest={this.onRestProxy}
                    {...collapseProps}
                >
                    <article aria-label={ariaTittel} className="ekspanderbartPanel__innhold">
                        {children}
                    </article>
                </Collapse>
                {renderHiddenContent &&
                    <div role="tabpanel" className="ekspanderbartPanel__hiddenContent" id={hiddenContentId}>
                        {children}
                    </div>
                }
            </div>
        );
    }
}

export default EkspanderbartpanelBasePure;
