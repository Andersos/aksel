import * as React from 'react';
import * as classnames from 'classnames';
import { Collapse, CollapseProps } from 'react-collapse';
import 'nav-frontend-ekspanderbartpanel-style';

export interface EkspanderbartpanelBasePureProps {
    heading: React.ReactNode;
    className?: string;
    onClick: (event: React.SyntheticEvent<HTMLButtonElement>) => void;
    ariaTittel?: string;
    apen: boolean;
    children?: React.ReactNode;
    collapseProps?: CollapseProps;
}

export interface EkspanderbartpanelBasePureState {
    isCloseAnimation: boolean;
}

const cls = (props: EkspanderbartpanelBasePureProps, className?: string) => classnames('ekspanderbartPanel', className, {
    'ekspanderbartPanel--lukket': !props.apen,
    'ekspanderbartPanel--apen': props.apen
});

class EkspanderbartpanelBasePure extends React.Component<EkspanderbartpanelBasePureProps, EkspanderbartpanelBasePureState> {
    constructor(props) {
        super(props);

        this.state = {
            isCloseAnimation: false
        };

        this.onRestProxy = this.onRestProxy.bind(this);
        this.tabHandler = this.tabHandler.bind(this);
    }

    componentWillReceiveProps(nextProps) {
        if (this.props.apen && !nextProps.apen) {
            this.setState({isCloseAnimation: true});
        }
    }

    onRestProxy = () => {
        const {collapseProps} = this.props;
        this.setState({isCloseAnimation: false});
        if (collapseProps && collapseProps.onRest) {
            collapseProps.onRest();
        }
    };

    tabHandler(event) {
        const { keyCode } = event;
        const isTab = keyCode === 9;

        if (isTab && this.state.isCloseAnimation) {
            event.preventDefault();
        }
    }

    render() {
        const { className, children, apen, heading, ariaTittel, onClick, collapseProps, ...renderProps }: EkspanderbartpanelBasePureProps = this.props;
        console.log('apen', apen);
        return (
            <div className={cls(this.props, className)} {...renderProps}>
                <button
                    className="ekspanderbartPanel__hode"
                    onKeyDown={this.tabHandler}
                    onClick={onClick}
                    aria-expanded={apen}
                >
                    <div className="ekspanderbartPanel__flex-wrapper">
                        {heading}
                        <span className="ekspanderbartPanel__indikator" />
                    </div>
                </button>
                <Collapse isOpened={apen} onRest={this.onRestProxy} {...collapseProps} >
                    <article aria-label={ariaTittel} className="ekspanderbartPanel__innhold">{children}</article>
                </Collapse>
            </div>
        );
    }
}

export default EkspanderbartpanelBasePure;
