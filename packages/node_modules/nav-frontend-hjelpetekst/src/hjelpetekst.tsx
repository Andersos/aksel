import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as PT from 'prop-types';
import * as classnames from 'classnames';
import { guid, keyCodes } from 'nav-frontend-js-utils';
import { Normaltekst } from 'nav-frontend-typografi';
import 'nav-frontend-hjelpetekst-style';
import Ikon from 'nav-frontend-ikoner-assets';
import Popover, { PopoverOrientering, PopoverProps } from 'nav-frontend-popover';

export interface HjelpetekstProps {
    /**
     * Egendefinert klassenavn.
     */
    className?: string;
    /**
     * Bestemmer posisjon p√• Popover i forhold til Hjelpetekst-knappen.
     * Videreformidles til intern Popover-instans.
     */
    type?: PopoverOrientering;
    /**
     * Popover props som videreformidles til intern instans av Popover.
     */
    popoverProps?: PopoverProps;
}

export interface State {
    ankerEl?: HTMLButtonElement;
}

class Hjelpetekst extends React.Component<HjelpetekstProps, State> {
    static defaultProps: Partial<HjelpetekstProps> = {
        type: PopoverOrientering.Over
    };

    private apneKnapp: HTMLButtonElement;
    private popoverRef = React.createRef<Popover>();
    private popoverId: string;

    constructor(props) {
        super(props);

        this.state = {
            ankerEl: undefined
        };

        this.popoverId = guid();
    }

    checkFocus = () => {
        if (!this.state.ankerEl) {
            return;
        }
        window.setTimeout(() => {
            const focusElement = document.activeElement;
            const popoverEl = ReactDOM.findDOMNode(this.popoverRef.current);
            if (
                focusElement === popoverEl ||
                focusElement === this.apneKnapp ||
                (popoverEl.contains && popoverEl.contains(focusElement))
            ) {
                return;
            }
            this.togglePopover();
        }, 0); // tslint:disable-line:align
    }

    handleKeydown = (e) => {
        if (e.keyCode === keyCodes.tab) this.checkFocus();
    }

    togglePopover = () => {
        this.setState(
            { ankerEl: (this.state.ankerEl) ? undefined : this.apneKnapp },
            () => {
                if (this.state.ankerEl) {
                    window.addEventListener('keydown', this.handleKeydown);
                } else {
                    window.removeEventListener('keydown', this.handleKeydown);
                }
            }
        );
    }

    render() {
        const { children, className, popoverProps, type, ...rest } = this.props;

        return (
            <div className={classnames('hjelpetekst', className)}>
                <button
                    type="button"
                    ref={(button: HTMLButtonElement) => {
                        this.apneKnapp = button;
                    }}
                    className="hjelpetekst__apneknapp"
                    onClick={this.togglePopover}
                    aria-pressed={this.state.ankerEl !== undefined}
                    aria-controls={this.popoverId}
                    { ...rest }
                >
                    <Ikon kind={'help-circle'} className="hjelpetekst__ikon" />
                </button>
                <Popover
                    id={this.popoverId}
                    ankerEl={this.state.ankerEl}
                    onClose={() => this.setState({ ankerEl: undefined })}
                    orientering={type}
                    ref={this.popoverRef}
                    { ...popoverProps }
                >
                    <div
                        className="hjelpetekst__innhold"
                    >
                        {this.props.children}
                    </div>
                </Popover>
            </div>
        );
    }
}

export default Hjelpetekst;
