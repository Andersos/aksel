import * as React from 'react';
import * as PT from 'prop-types';
import * as cn from 'classnames';
import { omit, guid } from 'nav-frontend-js-utils';

import ToggleKnappPure, { ToggleKnappPureProps, ToggleKnappPurePropsShape } from './toggle-knapp-pure';

import 'nav-frontend-toggle-style';

export interface ToggleGruppeProps {
    /**
     * Array av toggle knapper, se `toggle-knapp-pure.tsx`
     */
    toggles?: ToggleKnappPureProps[];
    /**
     * Egendefinert klassenavn.
     */
    className?: string;
    /**
     * Hvis `true` vil det være mulig å velge flere knapper om gangen.
     */
    multi?: boolean;
    /**
     * Angir hvilke knapper som skal være trykket inn som default.
     */
    defaultPressed?: number | number[];
    /**
     * Hvis 'true' reduseres høyre/venstre-padding på knappene betraktelig.
     */
    kompakt?: boolean;
    /**
     * Custom onChange handler
     */
    onChange?: (event: React.SyntheticEvent<EventTarget>, indexes: number[]) => void;
}

export interface ToggleGruppeState {
    pressedIndexes: number[];
}

class ToggleGruppe extends React.Component<ToggleGruppeProps, ToggleGruppeState> {
    static Toggle = ToggleKnappPure;
    
    static defaultProps: ToggleGruppeProps = {
        multi: false,
        defaultPressed: []
    };

    constructor(props){
        super(props);
        const emptyArray: number[] = [];
        this.state = {
            pressedIndexes: emptyArray.concat(this.props.defaultPressed!)
        };
    }

    handleClick = (e, index, customOnClick) => {
        const foundIndex = this.state.pressedIndexes.indexOf(index);
        let newIndexes = this.state.pressedIndexes;

        if (typeof customOnClick === 'function') customOnClick(e);
        if (typeof this.props.onChange === 'function') this.props.onChange(e, newIndexes);

        if (!this.props.multi) {
            this.setState({
                pressedIndexes: [index]
            });
            return;
        }

        if (foundIndex !== -1) {
            newIndexes.splice(foundIndex, 1);
        } else {
            newIndexes.push(index);
        }

        this.setState({
            pressedIndexes: newIndexes
        });
    }

    renderToggles() {
        if (this.props.children) {
            return React.Children.map(
                this.props.children, 
                (child: React.ReactElement<ToggleKnappPureProps>, i: number) => {
                    if (React.isValidElement(child)) {
                        return React.cloneElement(child, {
                            pressed: (this.state.pressedIndexes.indexOf(i) !== -1),
                            kompakt: this.props.kompakt,
                            onClick: (e) => this.handleClick(e, i, child.props.onClick)
                        });
                    }
                    return child;
                }
            );
        }

        if (this.props.toggles) {
            return this.props.toggles.map((toggle, i) => {
                return (
                    <ToggleKnappPure
                        key={guid()}
                        kompakt={this.props.kompakt}
                        {...toggle}
                        pressed={this.state.pressedIndexes.indexOf(i) !== -1}
                        onClick={(e) => this.handleClick(e, i, toggle.onClick)}
                        children={toggle.children}
                    />
                );
            });
        }
    }

    render(){
        const { className, ...other } = this.props;
        const renderProps = omit(other,
            'children', 
            'defaultPressed',
            'kompakt',
            'multi',
            'toggles'
        );

        return (
            <div
                className={cn('toggleGruppe', className)}
                {...renderProps}
            >
                {this.renderToggles()}
            </div>
        );
    }
}

(ToggleGruppe as React.ComponentClass).propTypes = {
    /**
     * Array av toggle knapper, se `toggle-knapp-pure.tsx`
     */
    toggles: PT.arrayOf(ToggleKnappPurePropsShape),
    /**
     * Egendefinert klassenavn.
     */
    className: PT.string,
    /**
     * Hvis `true` vil det være mulig å velge flere knapper om gangen.
     */
    multi: PT.bool,
    /**
     * Angir hvilke knapper som skal være trykket inn som default.
     */
    defaultPressed: PT.oneOfType([PT.number, PT.arrayOf(PT.number)]),
    /**
     * Hvis 'true' reduseres høyre/venstre-padding på knappene betraktelig.
     */
    kompakt: PT.bool,
    /**
     * Custom onChange handler
     */
    onChange: PT.func
};

export default ToggleGruppe;