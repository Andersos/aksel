import * as React from 'react';
import * as cn from 'classnames';
import { omit, guid } from 'nav-frontend-js-utils';

import ToggleKnappPure, { ToggleKnappPureProps } from './toggle-knapp-pure';

import 'nav-frontend-toggle-style';

export interface ToggleGruppeProps {
    /**
     * Array av toggle knapper, se `toggle-knapp-pure.tsx`
     */
    toggles?: ToggleKnappPureProps[];
    /**
     * Egendefinert klassenavn
     */
    className?: string;
    /**
     * Hvis `true` vil det være mulig å velge flere knapper om gangen.
     */
    multi?: boolean;
    defaultPressed?: number | number[];
    kompakt?: boolean;
}

export interface ToggleGruppeState {
    pressedIndexes: number[];
}

const cls = (className, props) => cn('toggleGruppe', className, {
    'toggleGruppe--kompakt': props.kompakt
});

class ToggleGruppe extends React.Component<ToggleGruppeProps, ToggleGruppeState> {
    static Toggle = ToggleKnappPure;
    
    static defaultProps: ToggleGruppeProps = {
        multi: false,
        defaultPressed: []
    };

    constructor(props){
        super(props);
        const emptyArray: number[] = [];
        this.state = {
            pressedIndexes: emptyArray.concat(this.props.defaultPressed!)
        };
    }

    handleClick = (e, index) => {
        const foundIndex = this.state.pressedIndexes.indexOf(index);
        let newIndexes = this.state.pressedIndexes;

        if (!this.props.multi) {
            this.setState({
                pressedIndexes: [index]
            });
            return;
        }

        if (foundIndex !== -1) {
            newIndexes.splice(foundIndex, 1);
        } else {
            newIndexes.push(index);
        }

        this.setState({
            pressedIndexes: newIndexes
        });
    }

    renderToggles() {
        if (this.props.children) {
            return React.Children.map(this.props.children, (child, i) => {
                if (React.isValidElement(child)) {
                    return React.cloneElement(child as React.ReactElement<any>, {
                        pressed: (this.state.pressedIndexes.indexOf(i) !== -1),
                        onClick: (e) => this.handleClick(e, i)
                    });
                }
                return child;
            });
        }

        if (this.props.toggles) {
            return this.props.toggles.map((toggle, i) => {
                return (
                    <ToggleKnappPure
                        key={guid()}
                        pressed={this.state.pressedIndexes.indexOf(i) !== -1}
                        onClick={(e) => this.handleClick(e, i)}
                        children={toggle.children}
                    />
                );
            });
        }
    }

    render(){
        const { className } = this.props;
        const renderProps = omit(this.props, 
            'children', 
            'defaultPressed',
            'kompakt',
            'multi',
            'toggles'
        );

        return (
            <div
                className={cls(className, this.props)}
                {...renderProps}
            >
                {this.renderToggles()}
            </div>
        );
    }
}

export default ToggleGruppe;