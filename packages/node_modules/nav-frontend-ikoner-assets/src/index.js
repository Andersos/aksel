/* eslint-disable */
// Generated by gulp svg-icon - do not modify manually


import React, {Component} from 'react';
import PropTypes from 'prop-types';

const iconList = [
  'feil-sirkel-fyll',
  'help-circle',
  'help-circle_hover',
  'info-sirkel-fyll',
  'advarsel-sirkel-fyll',
  'ok-sirkel-fyll',
  'spinner',
  'spinner-negativ',
  'spinner-stroke',
  'spinner-stroke-negativ',
  'spinner-transparent',
]


export default class Icon extends Component {

  static propTypes = {
    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    kind: PropTypes.oneOf([
      'feil-sirkel-fyll',
      'help-circle',
      'help-circle_hover',
      'info-sirkel-fyll',
      'advarsel-sirkel-fyll',
      'ok-sirkel-fyll',
      'spinner',
      'spinner-negativ',
      'spinner-stroke',
      'spinner-stroke-negativ',
      'spinner-transparent',
    ]).isRequired,
    onClick: PropTypes.func,
    preview: PropTypes.bool,
    size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    style: PropTypes.oneOfType([
      PropTypes.array,
      PropTypes.object
    ]),
    wrapperStyle: PropTypes.oneOfType([
      PropTypes.array,
      PropTypes.object
    ])
  };

  static defaultProps = {
    size: 32
  }

  render() {
    const {kind, preview} = this.props

    return preview ?
      this.renderPreview() :
      this.renderIcon(kind)
  }

  renderPreview() {
    return (
      <div>
        {iconList.map(kind => this.renderPreviewKind(kind))}
      </div>
    )
  }

  renderIcon(kind) {
    const {wrapperStyle} = this.props;

    if (wrapperStyle)
      return <div style={wrapperStyle}>{this.getIcon(kind)}</div>

    return this.getIcon(kind)
  }

  renderPreviewKind(kind) {
    return (
      <div key={kind}>
        <h3>&lt;Icon kind="{kind}" /&gt;</h3>
        {this.renderIcon(kind)}
      </div>
    )
  }

  getIcon(kind) {
    const {height, onClick, size, style, width, ...props} = this.props;

    switch (kind) {
      default: return null;
      case ('feil-sirkel-fyll'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 24 24" ><g fill="none" fillRule="evenodd"><path d="M11.999 0C5.395 0 .013 5.372 0 11.976a11.923 11.923 0 0 0 3.498 8.493A11.925 11.925 0 0 0 11.977 24H12c6.603 0 11.986-5.373 12-11.978C24.013 5.406 18.64.012 11.999 0z" fillRule="nonzero" fill="#A13A28"/><path d="M12 10.651l3.372-3.372a.954.954 0 1 1 1.349 1.35L13.349 12l3.372 3.372a.954.954 0 1 1-1.35 1.349L12 13.349 8.628 16.72a.954.954 0 1 1-1.349-1.35L10.651 12 7.28 8.628A.954.954 0 1 1 8.63 7.28L12 10.651z" fill="#FFF" fillRule="nonzero"/></g></svg>);
      case ('help-circle'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 18.22 18.22"><title>Hjelp</title><path fill="none" d="M9.11 1a8.11 8.11 0 1 0 8.11 8.11A8.12 8.12 0 0 0 9.11 1zm0 13.7a.89.89 0 1 1 .89-.9.89.89 0 0 1-.89.9zm.5-5.7v1.89a.5.5 0 0 1-1 0V8.5a.5.5 0 0 1 .5-.5 1.85 1.85 0 1 0-1.85-1.85.5.5 0 0 1-1 0A2.85 2.85 0 1 1 9.61 9z"/><path fill="#2968b2" d="M9.11 0a9.11 9.11 0 1 0 9.11 9.11A9.12 9.12 0 0 0 9.11 0zm0 17.22a8.11 8.11 0 1 1 8.11-8.11 8.12 8.12 0 0 1-8.11 8.11z"/><path fill="#2968b2" d="M9.11 3.3a2.85 2.85 0 0 0-2.85 2.85.5.5 0 0 0 1 0A1.85 1.85 0 1 1 9.11 8a.5.5 0 0 0-.5.5v2.35a.5.5 0 0 0 1 0V9a2.85 2.85 0 0 0-.5-5.65z"/><circle fill="#2968b2" cx="9.11" cy="13.8" r=".89"/></svg>);
      case ('help-circle_hover'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 18.22 18.22"><title>Hjelp</title><path fill="#2868B3" d="M9.1 0C4.1 0 0 4.1 0 9.1s4.1 9.1 9.1 9.1 9.1-4.1 9.1-9.1S14.1 0 9.1 0zm0 14.7c-.5 0-.9-.4-.9-.9s.4-.9.9-.9.9.4.9.9-.4.9-.9.9zM9.6 9v1.9c0 .3-.2.5-.5.5s-.5-.2-.5-.5V8.5c0-.3.2-.5.5-.5 1 0 1.9-.8 1.9-1.8s-.8-1.9-1.9-1.9-1.8.8-1.8 1.8c0 .3-.2.5-.5.5s-.5-.2-.5-.5c0-1.6 1.3-2.9 2.8-2.9 1.4 0 2.5 1 2.8 2.4.3 1.6-.7 3.1-2.3 3.4z"/></svg>);
      case ('info-sirkel-fyll'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 24 24" ><g fillRule="nonzero" fill="none"><path d="M12 0C5.382 0 0 5.382 0 12s5.382 12 12 12c6.617 0 12-5.382 12-12S18.617 0 12 0z" fill="#669DB4"/><g fill="#FFF"><path d="M12 5a1.566 1.566 0 1 1 .11 3.13A1.566 1.566 0 0 1 12 5zM14.976 17.01c.563 0 1.043.431 1.043.991s-.48.992-1.043.992H9.39c-.564 0-1.043-.431-1.043-.992 0-.56.479-.99 1.043-.99h1.6v-5.016h-.986c-.565 0-1.044-.43-1.044-.991 0-.56.48-.991 1.044-.991h2.03c.563 0 1.043.43 1.043.99v6.007H14.976z"/></g></g></svg>);
      case ('advarsel-sirkel-fyll'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 24 24" ><g fill="none" fillRule="evenodd"><path d="M12.205-.004l-.214.002a12.225 12.225 0 0 0-8.517 3.659C1.179 5.977-.053 9.013.002 12.208c.115 6.613 5.296 11.793 11.795 11.793l.212-.002c6.726-.116 12.105-5.595 11.99-12.21C23.883 5.178 18.702-.003 12.204-.003z" fill="#FFA733" fillRule="nonzero"/><path d="M12.027 19H12A1.499 1.499 0 0 1 11.973 16L12 16a1.501 1.501 0 0 1 .027 3z" fill="#3E3832"/><path d="M12 5a1 1 0 0 1 1 1v7a1 1 0 0 1-2 0V6a1 1 0 0 1 1-1z" fill="#3E3832" fillRule="nonzero"/></g></svg>);
      case ('ok-sirkel-fyll'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 24 24" ><g fillRule="nonzero" fill="none"><path d="M12 0C5.383 0 0 5.384 0 12s5.383 12 12 12c6.616 0 12-5.384 12-12S18.616 0 12 0z" fill="#1C6937"/><path d="M9.64 14.441l6.46-5.839a.997.997 0 0 1 1.376.044.923.923 0 0 1-.046 1.334l-7.15 6.464a.993.993 0 0 1-.662.252.992.992 0 0 1-.69-.276l-2.382-2.308a.923.923 0 0 1 0-1.334.997.997 0 0 1 1.377 0l1.717 1.663z" fill="#FFF"/></g></svg>);
      case ('spinner'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 50 50" preserveAspectRatio="xMidYMid"><title>Venter...</title><circle xmlns="http://www.w3.org/2000/svg" cx="25" cy="25" r="20" stroke="#bdbab7" fill="none" strokeWidth="5"/><circle cx="25" cy="25" r="20" stroke="#7f756c" fill="none" strokeWidth="5" strokeDasharray="50 155" strokeLinecap="round"/></svg>);
      case ('spinner-negativ'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 50 50" preserveAspectRatio="xMidYMid"><title>Venter...</title><circle xmlns="http://www.w3.org/2000/svg" cx="25" cy="25" r="20" stroke="#eee" fill="none" strokeWidth="5"/><circle cx="25" cy="25" r="20" stroke="#888" fill="none" strokeWidth="5" strokeDasharray="50 155" strokeLinecap="round"/></svg>);
      case ('spinner-stroke'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 50 50" preserveAspectRatio="xMidYMid"><title>Venter...</title><circle xmlns="http://www.w3.org/2000/svg" cx="25" cy="25" r="20" stroke="#bdbab7" fill="none" strokeWidth="5"/><circle cx="25" cy="25" r="20" stroke="#7f756c" fill="none" strokeWidth="3" strokeDasharray="50 155" strokeLinecap="round"/></svg>);
      case ('spinner-stroke-negativ'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 50 50" preserveAspectRatio="xMidYMid"><title>Venter...</title><circle xmlns="http://www.w3.org/2000/svg" cx="25" cy="25" r="20" stroke="#eee" fill="none" strokeWidth="5"/><circle cx="25" cy="25" r="20" stroke="#888" fill="none" strokeWidth="3" strokeDasharray="50 155" strokeLinecap="round"/></svg>);
      case ('spinner-transparent'): return (<svg {...props} focusable="false" height={height || size} width={width || size} onClick={onClick} style={style} viewBox="0 0 50 50" preserveAspectRatio="xMidYMid"><title>Venter...</title><circle xmlns="http://www.w3.org/2000/svg" cx="25" cy="25" r="20" stroke="transparent" fill="none" strokeWidth="5"/><circle cx="25" cy="25" r="20" stroke="#7f756c" fill="none" strokeWidth="5" strokeDasharray="50 155" strokeLinecap="round"/></svg>);
      }
  }
}


