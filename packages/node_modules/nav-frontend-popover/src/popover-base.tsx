import * as React from 'react';
import * as PT from 'prop-types';
import * as classnames from 'classnames';

import 'nav-frontend-popover-style';

const cls = (props) => classnames('popover', props.className, {
    'popover--apen': props.apen,
    'popover--over': ['over', 'over-venstre', 'over-høyre'].indexOf(props.orientering) !== -1,
    'popover--under': ['under', 'under-venstre', 'under-høyre'].indexOf(props.orientering) !== -1,
    'popover--venstre': props.orientering === 'venstre',
    'popover--høyre': props.orientering === 'høyre',
    'popover--uten-pil': props.utenPil
});

export type PopoverOrientering = 'over' | 'over-venstre' | 'over-høyre' | 'under' | 'venstre' | 'høyre' | 'under-venstre' | 'under-høyre';

export interface PopoverBaseProps extends React.HTMLAttributes<HTMLDivElement> {
    /**
     * Egendefinert klassenavn.
     */
    className?: string;
    /**
     * Bestemmer om popover skal vises eller skjules (default)
     */
    apen: boolean;
    /**
     * Valgfri bredde på popover-vindu. Hvis ikke denne angis så vil bredden på vinduet skalere 
     * fritt avhengig av innholdet.
     */
    width?: number;
    /**
     * Valgfri fast høyde på popover-vindu. Hvis ikke denne angis så vil høyden på vinduet skalere
     * fritt avhengig av innholdet.
     */
    height?: number;
    /**
     * Orientering i forhold til anker. Bestemmer hvordan pilen skal posisjoneres i forhold til Popover-vinduet. 
     * Brukes også av Popover for å bestemme hvordan Popover-vinduet skal posisjoneres i forhold til ankeret.
     */
    orientering?: PopoverOrientering;
    /**
     * CSS-stiler for absolutt posisjonering av popover vindu og pil. Brukes av Popover for dynamisk
     * justering av posisjon ved resize og scroll.
     */
    posisjon?: PopoverPosisjonShape;
    /**
     * Bestemmer om pilen skal rendres eller ikke.
     */
    utenPil?: boolean;
}

export interface PopoverPosisjonShape {
    left?: number;
    top?: number;
    pilLeft?: number;
}

class PopoverBase extends React.PureComponent<PopoverBaseProps> {
    static defaultProps: Partial<PopoverBaseProps> = {
        orientering: 'over',
        posisjon: {
            left: 0,
            top: 0
        }
    };

    render() {
        const {
            children,
            className,
            apen,
            width,
            height,
            posisjon,
            utenPil,
            ...rest
        } = this.props;

        const stiler = {
            width,
            height,
            left: posisjon!.left,
            top: posisjon!.top
        };

        const pilStiler = (['høyre', 'venstre'].indexOf(this.props.orientering!) === -1)
            ? { left: this.props.posisjon!['pilLeft'] }
            : undefined ;

        return (
            <div
                className={cls(this.props)}
                style={stiler}
                onClick={(e) => e.stopPropagation()}
                {...rest}
            >
                <div className="popover__content-inner">
                    {children}
                </div>
                {
                    !this.props.utenPil &&
                    <span
                        className="popover__pil"
                        style={pilStiler}
                    />
                }
            </div>
        );
    }
}

export default PopoverBase;
